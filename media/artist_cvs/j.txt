from django.urls import path
from rest_framework_simplejwt.views import TokenRefreshView
from .views import (
    ArtistRegisterView, InvestorRegisterView, CustomTokenObtainPairView,
    UserProfileView, PublicUserProfileView
)

urlpatterns = [
    path('register/artist/', ArtistRegisterView.as_view(), name='artist_register'),
    path('register/investor/', InvestorRegisterView.as_view(), name='investor_register'),
    path('login/', CustomTokenObtainPairView.as_view(), name='token_obtain_pair'),
    path('login/refresh/', TokenRefreshView.as_view(), name='token_refresh'),
    path('profile/', UserProfileView.as_view(), name='user_profile'),
    path('profile/<str:username>/', PublicUserProfileView.as_view(), name='public_user_profile'),
]
----------
"""
URL configuration for showfani project.

The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/5.2/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
"""
from django.contrib import admin
from django.urls import path, include
from django.conf import settings
from django.conf.urls.static import static

urlpatterns = [
    path('admin/', admin.site.urls),
    path('api/users/', include('users.urls')),
    #path('api/posts/', include('posts.urls')),
   # path('api/chat/', include('chat.urls')),
   # path('api/filters/', include('filters.urls')), # يمكن حذف هذا إذا تم دمج الفلترة
   # path('api/search/', include('search.urls')),   # يمكن حذف هذا إذا تم دمج البحث
   # path('api/app/', include('app.urls')),
]

if settings.DEBUG:
    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)
    urlpatterns += static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)
------------------------------------------------------------------------------------

from django.contrib.auth.models import AbstractUser
from django.core.exceptions import ValidationError
import datetime
from django.db import models

# Create your models here.
class CustomUser(AbstractUser):
    ART_SECTION_CHOICES = [
        ('ACTING', 'Acting'),
        ('WRITING', 'Writing'),
        ('OTHER', 'Other'),
    ]
    full_name = models.CharField(max_length=255, blank=False, null=False)
    phone_number = models.CharField(max_length=20, unique=True, blank=False, null=False)
    country = models.CharField(max_length=100, blank=False, null=False)
    date_of_birth = models.DateField(blank=False, null=False)
    age = models.PositiveIntegerField(blank=True, null=True) # سيتم حسابه تلقائيًا
    profile_picture = models.ImageField(upload_to='profile_pics/', blank=True, null=True)
    email = models.EmailField(unique=True, blank=False, null=False)
    art_section = models.CharField(max_length=50, choices=ART_SECTION_CHOICES, blank=False, null=False)

    # override email as required field, and remove first/last name
    REQUIRED_FIELDS = ['full_name', 'phone_number', 'country', 'date_of_birth', 'email']
    # remove username from required fields if you want to use email as unique identifier
    # USERNAME_FIELD = 'email' # If you want to use email as login field

    def save(self, *args, **kwargs):
        if self.date_of_birth:
            today = datetime.date.today()
            self.age = today.year - self.date_of_birth.year - \
                       ((today.month, today.day) < (self.date_of_birth.month, self.date_of_birth.day))
        super().save(*args, **kwargs)

    def __str__(self):
        return self.username

# تحديث AUTH_USER_MODEL في settings.py
# AUTH_USER_MODEL = 'users.CustomUser'

class Artist(models.Model):
    user = models.OneToOneField(CustomUser, on_delete=models.CASCADE, primary_key=True, related_name='artist_profile')
    art_cv = models.FileField(upload_to='artist_cvs/', blank=True, null=True)
    what_i_need = models.TextField(blank=True, null=True) 
    

    def __str__(self):
        return f"Artist: {self.user.full_name}"

class Investor(models.Model):
    user = models.OneToOneField(CustomUser, on_delete=models.CASCADE, primary_key=True, related_name='investor_profile')
    SUPPORT_TYPE_CHOICES = [
        ('PAYMENT', 'Payment'),
        ('OTHER', 'Other'),
    ]
    support_type = models.CharField(max_length=50, choices=SUPPORT_TYPE_CHOICES, blank=False, null=False)
    own_art_company = models.BooleanField(default=False)
    company_name = models.CharField(max_length=255, blank=True, null=True)
    company_art_field = models.CharField(max_length=255, blank=True, null=True)
    what_i_need = models.TextField(blank=True, null=True) 
    bio = models.TextField(blank=True, null=True) 

    def __str__(self):
        return f"Investor: {self.user.full_name}"

---------------------------------



from rest_framework import generics, status
from rest_framework.response import Response
from rest_framework.permissions import AllowAny, IsAuthenticated
from rest_framework_simplejwt.views import TokenObtainPairView
from .serializers import (
    ArtistRegistrationSerializer, InvestorRegistrationSerializer,
    UserProfileDetailSerializer, CustomUserSerializer,
    ArtistProfileSerializer, InvestorProfileSerializer
)
from .models import CustomUser, Artist, Investor
# Create your views here.
class ArtistRegisterView(generics.CreateAPIView):
    queryset = CustomUser.objects.all()
    permission_classes = (AllowAny,)
    serializer_class = ArtistRegistrationSerializer

class InvestorRegisterView(generics.CreateAPIView):
    queryset = CustomUser.objects.all()
    permission_classes = (AllowAny,)
    serializer_class = InvestorRegistrationSerializer

class CustomTokenObtainPairView(TokenObtainPairView):
    # يمكن تخصيصها لإرجاع معلومات إضافية للمستخدم بعد تسجيل الدخول
    pass

class UserProfileView(generics.RetrieveUpdateAPIView):
    queryset = CustomUser.objects.all()
    serializer_class = UserProfileDetailSerializer
    permission_classes = [IsAuthenticated]

    def get_object(self):
        # هذا يضمن أن المستخدم يمكنه فقط رؤية أو تعديل ملفه الشخصي
        return self.request.user

    def update(self, request, *args, **kwargs):
        partial = kwargs.pop('partial', False)
        instance = self.get_object()

        # Update CustomUser fields
        user_serializer = CustomUserSerializer(instance, data=request.data, partial=partial)
        user_serializer.is_valid(raise_exception=True)
        user_serializer.save()

        # Update Artist or Investor profile if exists
        if hasattr(instance, 'artist_profile'):
            artist_data = request.data.get('artist_profile')
            if artist_data:
                artist_serializer = ArtistProfileSerializer(instance.artist_profile, data=artist_data, partial=partial)
                artist_serializer.is_valid(raise_exception=True)
                artist_serializer.save()
        elif hasattr(instance, 'investor_profile'):
            investor_data = request.data.get('investor_profile')
            if investor_data:
                investor_serializer = InvestorProfileSerializer(instance.investor_profile, data=investor_data, partial=partial)
                investor_serializer.is_valid(raise_exception=True)
                investor_serializer.save()

        # Re-serialize the full profile for response
        full_serializer = self.get_serializer(instance)
        return Response(full_serializer.data)

class PublicUserProfileView(generics.RetrieveAPIView):
    queryset = CustomUser.objects.all()
    serializer_class = UserProfileDetailSerializer
    permission_classes = [AllowAny] # يمكن للجميع رؤية الملفات الشخصية العامة
    lookup_field = 'username' # يمكن البحث بالـ username للملفات الشخصية العامة
------------------------------------
from rest_framework import serializers
from .models import CustomUser, Artist, Investor
from django.contrib.auth.password_validation import validate_password

class CustomUserSerializer(serializers.ModelSerializer):
    password = serializers.CharField(write_only=True, required=True, validators=[validate_password])
    confirm_password = serializers.CharField(write_only=True, required=True)

    class Meta:
        model = CustomUser
        fields = [
            'username', 'full_name', 'email', 'phone_number', 'country',
            'date_of_birth', 'profile_picture', 'password', 'confirm_password'
        ]
        extra_kwargs = {
            'password': {'write_only': True},
            'confirm_password': {'write_only': True},
            'age': {'read_only': True}, # العمر يُحسب تلقائيا
        }

    def validate(self, data):
        if data['password'] != data['confirm_password']:
            raise serializers.ValidationError({"confirm_password": "Password fields didn't match."})
        # التحقق من أن البريد الإلكتروني ورقم الهاتف غير مكررين (سيتم التعامل معها من خلال unique=True في النموذج أيضاً)
        if CustomUser.objects.filter(email=data['email']).exists():
            raise serializers.ValidationError({"email": "This email is already registered."})
        if CustomUser.objects.filter(phone_number=data['phone_number']).exists():
            raise serializers.ValidationError({"phone_number": "This phone number is already registered."})
        return data

    def create(self, validated_data):
        validated_data.pop('confirm_password') # لا نحتاج لتخزينها
        user = CustomUser.objects.create_user(
            username=validated_data['username'],
            email=validated_data['email'],
            password=validated_data['password'],
            full_name=validated_data['full_name'],
            phone_number=validated_data['phone_number'],
            country=validated_data['country'],
            date_of_birth=validated_data['date_of_birth'],
            profile_picture=validated_data.get('profile_picture')
        )
        return user

class ArtistProfileSerializer(serializers.ModelSerializer):
    class Meta:
        model = Artist
        fields = ['art_section', 'art_cv', 'what_i_need', 'bio']

class InvestorProfileSerializer(serializers.ModelSerializer):
    class Meta:
        model = Investor
        fields = ['support_type', 'own_art_company', 'company_name', 'company_art_field', 'what_i_need', 'bio']
        extra_kwargs = {
            'company_name': {'required': False},
            'company_art_field': {'required': False},
        }

    def validate(self, data):
        if data.get('own_art_company') and not data.get('company_name'):
            raise serializers.ValidationError({"company_name": "Company name is required if you own a company."})
        if data.get('own_art_company') and not data.get('company_art_field'):
            raise serializers.ValidationError({"company_art_field": "Company art field is required if you own a company."})
        return data

class ArtistRegistrationSerializer(CustomUserSerializer):
    artist_profile = ArtistProfileSerializer()

    class Meta(CustomUserSerializer.Meta):
        fields = CustomUserSerializer.Meta.fields + ['artist_profile']

    def create(self, validated_data):
        artist_profile_data = validated_data.pop('artist_profile')
        user = super().create(validated_data)
        Artist.objects.create(user=user, **artist_profile_data)
        return user

class InvestorRegistrationSerializer(CustomUserSerializer):
    investor_profile = InvestorProfileSerializer()

    class Meta(CustomUserSerializer.Meta):
        fields = CustomUserSerializer.Meta.fields + ['investor_profile']

    def create(self, validated_data):
        investor_profile_data = validated_data.pop('investor_profile')
        user = super().create(validated_data)
        Investor.objects.create(user=user, **investor_profile_data)
        return user

# Serializer for viewing and updating user profiles
class UserProfileDetailSerializer(serializers.ModelSerializer):
    artist_profile = ArtistProfileSerializer(read_only=True)
    investor_profile = InvestorProfileSerializer(read_only=True)

    class Meta:
        model = CustomUser
        fields = [
            'username', 'full_name', 'email', 'phone_number', 'country',
            'date_of_birth', 'age', 'profile_picture', 'artist_profile', 'investor_profile'
        ]
        read_only_fields = ['username', 'email', 'age'] # لا يمكن تغييرهم بعد الإنشاء
----------------
"""
Django settings for showfani project.

Generated by 'django-admin startproject' using Django 5.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-^6#fzpjdmqwuzd)hb96k)iyy^a+vo91-o+p5-hl%km^@7d*v5u'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    #my libraries
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework_simplejwt', 
    #my apps
    'users',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'showfani.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'showfani.wsgi.application'

AUTH_USER_MODEL = 'users.CustomUser'
# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'
# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
